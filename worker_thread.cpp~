/*
 * worker_thread.cpp
 *
 *  Created on: 2015年7月16日
 *      Author: chenms
 */
#include "worker_thread.h"

 thread_local WorkerThread *pthread_info=NULL;

WorkerThread::WorkerThread(int tm,int tm_threshold)
{
	pthread_event_base_=NULL;
	pnotify_event_=NULL;
	ptimeout_event_=NULL;
	notfiy_recv_fd_=-1;
	notfiy_send_fd_=-1;
	overtime_threshold_=tm_threshold;
    timespan_=tm;
}

WorkerThread::~WorkerThread()
{
	if(notfiy_recv_fd_!=-1)
		close(notfiy_recv_fd_);
	if(notfiy_send_fd_!=-1)
		close(notfiy_send_fd_);
	if(pthread_event_base_!=NULL)
		event_base_free(pthread_event_base_);
	if(pnotify_event_!=NULL)
		event_free(pnotify_event_);
	if(ptimeout_event_)
		event_free(ptimeout_event_);

	for(auto pos=map_tcp_conns_.begin();pos!=map_tcp_conns_.end();++pos)
		delete pos->second;
	for(auto pos=map_udp_conns_.begin();pos!=map_udp_conns_.end();++pos)
		delete pos->second;
}

bool WorkerThread::Run()
{
	do{
		if(!CreateNotifyFds())
			break;
		if(!InitEventHandler())
			break;
		try{
			shared_ptr_thread_.reset(new std::thread([this]
													 {
														 pthread_info=this;
														 event_base_loop(pthread_event_base_, 0);
													 }
										 ));
		}catch(...)
		{
			break;
		}
		return true;
	}while(0);
	return false;
}
bool WorkerThread::CreateNotifyFds()
{
	 int fds[2];
	 bool ret=false;
	 if (!pipe(fds,O_NONBLOCK))
	 {
		  notfiy_recv_fd_= fds[0];
		  notfiy_send_fd_ = fds[1];
		  ret=true;
	 }
	 return ret;
}

bool WorkerThread::InitEventHandler()
{
		do
		{
			pthread_event_base_=event_base_new();
			if(pthread_event_base_==NULL)
				break;
			pnotify_event_=event_new(pthread_event_base_,notfiy_recv_fd_,EV_READ | EV_PERSIST,HandleConn,(void *)this);
			if(pnotify_event_==NULL)
				break;
			if(event_add(pnotify_event_, 0))
				break;
			ptimeout_event_=event_new(pthread_event_base_,-1,EV_TIMEOUT|EV_PERSIST,TimingProcessing,&overtime_threshold_);
			if(!ptimeout_event_)
				break;
			timeval tv={timespan_,0};
			if(event_add(ptimeout_event_,&tv)==-1)
				break;
			return true;
		}while(0);
		return false;
}

void WorkerThread::HandleTcpConn(evutil_socket_t fd, short what, void * arg)
{
	LOG(TRACE)<<"Worker got the tcp conn";
	WorkerThread * pwt=static_cast<WorkerThread *>(arg);
	char  buf[1];
	if(read(fd, buf, 1)!=1)//从sockpair的另一端读数据
		LOG(ERROR)<<"workerthread accept connection failed\n";

	int accept_sock=pwt->PopTcpFromQueue();
	std::shared_ptr<TcpConnItem>ptci(new TcpConnItem(accept_sock));//将其地址存起来
	struct bufferevent * bev=bufferevent_socket_new(pwt->pthread_event_base_,ptci->tcp_sock_,BEV_OPT_CLOSE_ON_FREE);
	if(bev==NULL)
		return;
	//将链接信息加入缓存中
    pwt->AddTcpConnItem(ptci);
    bufferevent_setcb(bev, TcpConnReadCb, NULL/*ConnWriteCb*/, TcpConnEventCB,ptci/*arg*/);
    bufferevent_enable(bev, EV_READ /*| EV_WRITE*/ );
}

void WorkerThread::TcpConnReadCb(bufferevent * bev,void *ctx){
    //TODO
	LOG(TRACE)<<"Read a Tcp data";
}

void WorkerThread::TcpConnEventCB(bufferevent *bev,short int  events,void * ctx){
    //TODO
	LOG(TRACE)<<"tcp conn takes an error";
    TcpConnItem * ptci=static_cast<TcpConnItem *>(ctx);
    //ThreadInfo * pti=static_cast<ThreadInfo *>(pthread_info);
    //when comes an error,delete the item in the cache
    pthread_info->DeleteTcpConnItem(ptci);
    bufferevent_free(bev);
}

void WorkerThread::HandleUdpConn(evutil_socket_t fd, short what, void * arg){
	LOG(TRACE)<<"Worker got the udp conn";
	WorkerThread * pwt=static_cast<WorkerThread *>(arg);
	char  buf[1];
	if(read(fd, buf, 1)!=1)//从sockpair的另一端读数据
		LOG(ERROR)<<"workerthread accept udp connection failed\n";

	//Get the client address from the queue
	sockaddr_in addr;
	pwt->PopUdpFromQueue(addr);

    int udp_conn_socket=socket(AF_INET,SOCK_DGRAM,0);
    struct sockaddr_in sin;
    memset(&sin, 0, sizeof(sin));
    sin.sin_family = AF_INET;
    sin.sin_addr.s_addr = htonl(0);
    sin.sin_port = htons(0);
    if(bind(udp_conn_socket,(const sockaddr*)&sin,sizeof(sin))==-1)
    {
        LOG(ERROR)<<"binding udp temp socket fails";
        return;
    }
    UdpConnItem *puci=new UdpConnItem(udp_conn_socket);
    struct event *pudp_read_event=event_new(pwt->pthread_event_base_,udp_conn_socket,EV_READ | EV_PERSIST,UdpConnReadCb,(void *)puci);
    if(pudp_read_event==NULL)
        return;
    if(event_add(pudp_read_event, 0))
        return;
    puci->pudp_read_event_=pudp_read_event;
    //将udp“链接”信息加入threadinfo缓存中
    pthread_info->AddUdpConnItem(puci);
    //TODO send respond to the client by using the client_addr

    delete paddr;//delete client_addr

}

void WorkerThread::UdpConnReadCb(evutil_socket_t fd, short what, void * arg){

}

void WorkerThread::UdpConnEventCB(evutil_socket_t fd, short what, void * arg){

}

void WorkerThread::TimingProcessing(evutil_socket_t fd, short what, void * arg){

}
